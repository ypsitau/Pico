#!/usr/bin/env gurax
import(font.bdf)
import(tar)

// shinonome-0.9.11p1.tar.bz2/shinonome-0.9.11/bdf/shnm8x16r.bdf
if (sys.argv.len < 2) {
	sys.cerr.Println('usage: convbdf bdffile')
	sys.Exit(1)
}
fileName = sys.argv[1]
ctx = font.bdf.Context(fileName)
bytesPerLine = Int(ctx.FONTBOUNDINGBOX.h + 7) / 8
codeFirst = 32, codeLast = 126
//fontEntryNames = []
Stream('../Font_Shinonome.cpp', 'w') {|fout|
	fout.Printf(R'''
	// %s
	#include "SSD1306.h"

	namespace Font_Shinonome {
	
	''', ctx.XLogicalFontDescription)
	ctx.charEntryTbl.Each {|charEntry, idx|
		(idx > 0) && fout.Println()
		codeUTF32 = charEntry.codeUTF32
		if (32 <= codeUTF32 && codeUTF32 < 127) {
			fout.Printf("// '%c'\n", codeUTF32)
		} else {
			fout.Printf("// 0x%08x\n", codeUTF32)
		}
		fontEntryName = Format('fontEntry_%08x', codeUTF32)
		//fontEntryNames.Add(fontEntryName)
		fout.Printf('const SSD1306::FontEntry %s = { 0x%08x, {\n', fontEntryName, codeUTF32)
		charEntry.ScanBitmapVert().Each {|data|
			if (bytesPerLine == 1) {
				fout.Printf('\t0b%08b,\n', data)
			} else {
				fout.Printf('\t0b%08b,0b%08b,\n', (data >> 8) & 0xff, data & 0xff)
			}
		}
		fout.Printf('} };\n')
	}
	fout.Println()
	fout.Printf('const SSD1306::Font font = { { %d, %d, %d, 0, %d, %d, %d }, {\n',
		ctx.FONTBOUNDINGBOX.w, ctx.FONTBOUNDINGBOX.h, bytesPerLine, codeFirst, codeLast, 126 - 32 + 1)
	fout.Printf('\t&fontEntry_%08x,\n', 32..126)
	fout.Print(R'''
	} };
	
	}
	''')
}
